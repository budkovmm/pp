// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "pp/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// RoleUseCase is an autogenerated mock type for the RoleUseCase type
type RoleUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: name
func (_m *RoleUseCase) Create(name model.RoleName) (*model.Role, error) {
	ret := _m.Called(name)

	var r0 *model.Role
	if rf, ok := ret.Get(0).(func(model.RoleName) *model.Role); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.RoleName) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *RoleUseCase) Delete(id model.RoleID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.RoleID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: id
func (_m *RoleUseCase) GetById(id model.RoleID) (*model.Role, error) {
	ret := _m.Called(id)

	var r0 *model.Role
	if rf, ok := ret.Get(0).(func(model.RoleID) *model.Role); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.RoleID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: limit, offset
func (_m *RoleUseCase) GetAll(limit int, offset int) ([]model.Role, error) {
	ret := _m.Called(limit, offset)

	var r0 []model.Role
	if rf, ok := ret.Get(0).(func(int, int) []model.Role); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, name
func (_m *RoleUseCase) Update(id model.RoleID, name model.RoleName) (*model.Role, error) {
	ret := _m.Called(id, name)

	var r0 *model.Role
	if rf, ok := ret.Get(0).(func(model.RoleID, model.RoleName) *model.Role); ok {
		r0 = rf(id, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.RoleID, model.RoleName) error); ok {
		r1 = rf(id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
